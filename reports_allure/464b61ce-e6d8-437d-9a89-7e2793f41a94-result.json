{"name": "test_create_shorlink_should_yield_201", "status": "failed", "statusDetails": {"message": "AssertionError: inappropriate status code\nassert (200 == 201)\n +  where 200 = <Response [200]>.status_code", "trace": "self = <tests.test_shortlinks.test_create_shortlinks.TestGetShorLinks object at 0x7fd1a8bffeb8>\n\n    def test_create_shorlink_should_yield_201(self):\n        # create a shortlink and verify the details of the same\n        sl = \"ajaytestautomation11\"\n        des = \"test automation using python requests\"\n        url = \"https://en.wikipedgia.org/wiki/Enigma_machine\"\n    \n        create_sl_response = request_method(POST, url=base_url,\n                                            headers={\n                                                \"Authorization\": self.header},\n                                            json=operations('create', sl=sl, des=des, url=url)\n                                            )\n    \n        # retrieving the above created SL to ensure the create operation is successful\n        retrieve_sl_response = request_method(POST, url=base_url,\n                                              headers={\n                                                  \"Authorization\": self.header},\n                                              json=operations('get_SL', sk=sl))\n        retrieve_sl_response_json = retrieve_sl_response.json()\n    \n        # deleting the above created SL\n        pk = retrieve_sl_response_json['data']['getShortcut']['pk']\n        uid = retrieve_sl_response_json['data']['getShortcut']['uid']\n        del_res = request_method(POST, url=base_url, headers={\"Authorization\": self.header},\n                                 json=operations('delete', sk=sl, pk=pk, uid=uid))\n    \n>       assert create_sl_response.status_code == 201 and success_assertion(\"appropriate status code\"), \\\n            \"inappropriate status code\"\nE       AssertionError: inappropriate status code\nE       assert (200 == 201)\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_shortlinks/test_create_shortlinks.py:35: AssertionError"}, "attachments": [{"name": "stdout", "source": "2c49924d-6171-4a60-b699-1d98b351da61-attachment.txt", "type": "text/plain"}], "start": 1629037151961, "stop": 1629037158381, "uuid": "55e15e59-4f6d-4b8c-ada5-677ac0958d40", "historyId": "8f0e5b646b7370809a05f5c365299c24", "testCaseId": "147e537bb97f1d39740e1ce0f189d671", "fullName": "tests.test_shortlinks.test_create_shortlinks.TestGetShorLinks#test_create_shorlink_should_yield_201", "labels": [{"name": "parentSuite", "value": "tests.test_shortlinks"}, {"name": "suite", "value": "test_create_shortlinks"}, {"name": "subSuite", "value": "TestGetShorLinks"}, {"name": "host", "value": "Ajaykumars-MacBook-Air.local"}, {"name": "thread", "value": "24908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shortlinks.test_create_shortlinks"}]}